<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第2章 程序设计语言基础知识</title>
      <link href="/2023/10/04/Markdown%E7%89%88%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/%E7%AC%AC2%E7%AB%A0%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/10/04/Markdown%E7%89%88%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/%E7%AC%AC2%E7%AB%A0%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="第2章-程序设计语言基础知识"><a href="#第2章-程序设计语言基础知识" class="headerlink" title="第2章 程序设计语言基础知识"></a>第2章 程序设计语言基础知识</h1><h2 id="一-程序设计语言概述"><a href="#一-程序设计语言概述" class="headerlink" title="一  程序设计语言概述"></a>一  程序设计语言概述</h2><ul><li>程序设计语言是为了书写计算机程序而人为设计的符号语言，用于对计算过程进行描述、组织和推导</li></ul><h3 id="1-各语言特点"><a href="#1-各语言特点" class="headerlink" title="1. 各语言特点"></a>1. 各语言特点</h3><ul><li>低级语言：机器语言（计算机硬件只能识别0和1的指令程序），汇编语言</li><li>高级语言：功能更强，抽象级别更高，与人们使用的自然语言比较接近</li></ul><table width="568">    <tbody>        <tr class="firstRow">            <td width="568" valign="top" style="padding: 0px 7px; border-width: 1px; border-color: windowtext;">                <p>                    <span style=";font-family:宋体;font-size:14px">Fortran<span style="font-family:宋体">语言，科学计算，执行效率高</span></span>                </p>            </td>        </tr>        <tr>            <td width="568" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p>                    <span style=";font-family:宋体;font-size:14px">Pascal<span style="font-family:宋体">语言，为教学而开发的，表达能力强，</span><span style="font-family:Calibri">delphi</span></span>                </p>            </td>        </tr>        <tr>            <td width="568" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p>                    <span style=";font-family:宋体;font-size:14px">C<span style="font-family:宋体">语言，指针操作能力强，高效</span></span>                </p>            </td>        </tr>        <tr>            <td width="568" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p>                    <span style=";font-family:宋体;font-size:14px">Lisp<span style="font-family:宋体">语言，函数式程序语言，符号处理，人工智能</span></span>                </p>            </td>        </tr>        <tr>            <td width="568" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p>                    <span style=";font-family:宋体;font-size:14px">C++<span style="font-family:宋体">语言，面向对象，高效</span></span>                </p>            </td>        </tr>        <tr>            <td width="568" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p>                    <span style=";font-family:宋体;font-size:14px">Java<span style="font-family:宋体">语言，面向对象，中间代码，跨平台</span></span>                </p>            </td>        </tr>        <tr>            <td width="568" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p>                    <span style=";font-family:宋体;font-size:14px">C#<span style="font-family:宋体">语言，面向对象，中间代码，</span><span style="font-family:Calibri">.NET</span></span>                </p>            </td>        </tr>        <tr>            <td width="568" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p>                    <span style=";font-family:宋体;font-size:14px">Prolog<span style="font-family:宋体">语言，逻辑推理，间接性，表达能力强，数据库和专家系统</span></span>                </p>            </td>        </tr>    </tbody></table><h3 id="2-解释和编译"><a href="#2-解释和编译" class="headerlink" title="2. 解释和编译"></a>2. 解释和编译</h3><ul><li>都是将高级语言翻译成计算机硬件认识的及其语言。</li><li>编译：生成独立的可执行文件，直接运行，运行时无法控制源程序，效率高。</li><li>解释：不生成可执行文件，可以逐条解释执行，用于调试模式，可以控制源程序，因为还需要控制程序，因此执行速度慢，相对于编译效率低。</li></ul><h3 id="3-程序语言组成"><a href="#3-程序语言组成" class="headerlink" title="3. 程序语言组成"></a>3. 程序语言组成</h3><ul><li>语法（一组规则）</li><li>语义（语法成分的含义）</li><li>语用（构成语言的各个记号和使用者的关系）</li></ul><h2 id="二．程序设计语言的基本成分"><a href="#二．程序设计语言的基本成分" class="headerlink" title="二．程序设计语言的基本成分"></a>二．程序设计语言的基本成分</h2><h3 id="1-数据成分"><a href="#1-数据成分" class="headerlink" title="1.  数据成分"></a>1.  数据成分</h3><p>是一种程序设计语言的数据和数据类型，数据分为常量（程序运行时不可改变）、变量（可以改变）、全局量（存储空间在静态数据区分配）、局部量（存储空间在堆栈区分配）</p><h3 id="2-数据类型有："><a href="#2-数据类型有：" class="headerlink" title="2.  数据类型有："></a>2.  数据类型有：</h3><p>整型、字符型、双精度、单精度浮点型、布尔型等</p><h3 id="3-运算成分："><a href="#3-运算成分：" class="headerlink" title="3.  运算成分："></a>3.  运算成分：</h3><p>指明允许使用的运算符号即运算规则，包括算数运算、逻辑运算、关系运算、位运算等。</p><h3 id="4-控制成分："><a href="#4-控制成分：" class="headerlink" title="4.  控制成分："></a>4.  控制成分：</h3><p>指明语言允许标书的控制结构。包括顺序结构、选择结构、循环结构（初始化+循环体+循环条件）<br><img src="/./images/2-2.png" alt="软件设计师教程知识点整理"></p><h3 id="5-传输成分："><a href="#5-传输成分：" class="headerlink" title="5.  传输成分："></a>5.  传输成分：</h3><p>指明语言允许的数据传输方式。如：赋值处理、数据的输入输出等</p><h3 id="6-函数："><a href="#6-函数：" class="headerlink" title="6.  函数："></a>6.  函数：</h3><p>C程序有一个或多个函数组成，每个函数都有一个名字，其中有且仅有一个名字为main函数作为运行时的起点。函数式程序模块的主要成分，是一段具有独立功能的程序。函数使用涉及三个概念：函数定义、函数声明（先声明后使用）、函数调用</p><h3 id="7-调用："><a href="#7-调用：" class="headerlink" title="7 调用："></a>7 调用：</h3><ul><li>传值调用：将实参的值传递给形参，形参的改变不会导致调用点所传的实参的值改变。实参可是是合法的变量、常量、表达式</li><li>传址调用：即引用调用，将实参的地址传值给形参，即相当于实参存储单元的地址引用，因此其值改变的同时就改变了实参的值，实参不能为常-量，只能是合法的变量和表达式。</li><li>因此，在编程时，要改变参数值，就传址，不改变，就传值</li></ul><h2 id="三．编译程序基本原理"><a href="#三．编译程序基本原理" class="headerlink" title="三．编译程序基本原理"></a>三．编译程序基本原理</h2><h3 id="1-功能："><a href="#1-功能：" class="headerlink" title="1.  功能："></a>1.  功能：</h3><p>是把高级语言书写的程序翻译成汇编语言或机器语言<br>分为6个阶段：</p><ul><li>1.词法分析：对源程序字符进行扫描根据构词规则识别单词（也称单词符号或符号）</li><li>2.语法分析：逻辑阶段，根据识别的单词组合成各类语法短语，如：程序，语句，表达式等，分析判断源程序在结构是否正确</li><li>3.语义分析：逻辑阶段，对结构上正确的源程序进行上下文有关性质的审查。如：类型匹配、除法除数不为0等。分为静态语义错误（编译阶段能够发现）、动态语义错误（运行时能发现）</li><li>4.中间代码和目标代码生成：中间代码是语义分析产生的需要经过优化链接，最终生成可执行的目标代码。引入中间代码的目的是进行与机器无关的代码优化处理。常用的中间代码有后缀式（逆波兰式）、三元式（三地址码）、四元式和树等形式。<br><img src="/./images/2-2.png" alt="软件设计师教程知识点整理"></li></ul><h3 id="2-文法定义："><a href="#2-文法定义：" class="headerlink" title="2.  文法定义："></a>2.  文法定义：</h3><ul><li><p>2.1 形式文法四元组G&#x3D;（V,T,S,P）<br>  1.S: 文法开始符号<br>  2.V: 不是语言组成部分，可理解为占位符；非终结符：能够推导出其他元素<br>  3.P：产生式。用终结符替代非终结符的规则；即非终结符推导出终结符的公式<br>  4.T: 终结符，语言组成部分，是最终结果；不能推导出其他元素</p></li><li><p>2.2 闭包：如下图，一般闭包可以为0个的情况代付运算<br><img src="/./images/2-4.png" alt="软件设计师教程知识点整理"></p></li><li><p>2.3 文法类型：<br><img src="/./images/2-5.png" alt="软件设计师教程知识点整理"></p><ul><li>1型 -》 语义分析（上下文有关）</li><li>2型 -》 语法分析（上下文无关）</li></ul></li></ul><h2 id="四．正规式"><a href="#四．正规式" class="headerlink" title="四．正规式"></a>四．正规式</h2><p><img src="/./images/2-6.png" alt="软件设计师教程知识点整理"></p><h2 id="五．有限自动机"><a href="#五．有限自动机" class="headerlink" title="五．有限自动机"></a>五．有限自动机</h2><p><img src="/./images/2-7.png" alt="软件设计师教程知识点整理"></p><h3 id="例：如下图：S-开始，ACB转换，F-两个圈是最终结果"><a href="#例：如下图：S-开始，ACB转换，F-两个圈是最终结果" class="headerlink" title="例：如下图：S 开始，ACB转换，F 两个圈是最终结果"></a>例：如下图：S 开始，ACB转换，F 两个圈是最终结果</h3><p><img src="/./images/2-8.png" alt="软件设计师教程知识点整理"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">S输入1，得到A输入0 得到F</span><br><span class="line">S输入1，得到A输入1 ,得到C输入0,1 得到F</span><br><span class="line">S输入0，得到B输入0 得到F</span><br><span class="line">S输入0，得到B输入1，得到C输入0,1 得到F</span><br><span class="line">每一条线路都是唯一的，得出此图为确定有限自动机</span><br></pre></td></tr></table></figure><ul><li><p>确定有限自动机：输入同一个值，得出的后继是唯一的</p></li><li><p>不确定的有限自动机：输入同一个值，得出多个后继,下面例子是不确定的</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例：S输入1，得到B</span><br><span class="line">S输入1，得到A</span><br></pre></td></tr></table></figure></li></ul><h2 id="六．语法分析方法"><a href="#六．语法分析方法" class="headerlink" title="六．语法分析方法"></a>六．语法分析方法</h2><h3 id="1-自上而下语法分析："><a href="#1-自上而下语法分析：" class="headerlink" title="1. 自上而下语法分析："></a>1. 自上而下语法分析：</h3><p>最左推导，从左至右。给定文法G和源程序串r,从G的开始符号出S出发，通过反复使用产生式对举行中的非终结符进行替换（推导），逐步推出r<br>递归下降：利用函数之间的递归调用模拟语法树自上而下的构造过程，是一种自上而下的语法分析方法</p><h3 id="2-自下而上语法分析："><a href="#2-自下而上语法分析：" class="headerlink" title="2. 自下而上语法分析："></a>2. 自下而上语法分析：</h3><p>最右推导，从右至左<br>移进-归约思想：设置一个栈，将输入符号逐个移进栈中，栈顶形成某产生式的又不时，就用左部去替换，称为归约。从右部推导出左部，是一种自下而上的语法分析方法</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第1章计算机系统知识</title>
      <link href="/2023/10/04/Markdown%E7%89%88%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/%E7%AC%AC1%E7%AB%A0%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/10/04/Markdown%E7%89%88%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/%E7%AC%AC1%E7%AB%A0%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="第1章-计算机系统知识"><a href="#第1章-计算机系统知识" class="headerlink" title="第1章 计算机系统知识"></a>第1章 计算机系统知识</h1><h2 id="一-计算机硬件组成"><a href="#一-计算机硬件组成" class="headerlink" title="一 计算机硬件组成"></a>一 计算机硬件组成</h2><h4 id="1-五大组成部件"><a href="#1-五大组成部件" class="headerlink" title="1. 五大组成部件"></a>1. 五大组成部件</h4><ul><li>运算器</li><li>控制器</li><li>存储器（内存、外存、cache）</li><li>输入设备</li><li>输出设备<br>CPU &#x3D; 运算器 + 控制器<br>主机 &#x3D; CPU + 存储器</li></ul><h4 id="2-中央处理器-CPU"><a href="#2-中央处理器-CPU" class="headerlink" title="2. 中央处理器 CPU"></a>2. 中央处理器 CPU</h4><ul><li><p>组成：运算器、控制器、寄存器组、内部总线</p></li><li><p>功能：程序控制，操作控制，时间控制，数据处理功能</p></li><li><p>运算器组成（执行算数和逻辑运算，并进行逻辑测试，如与或非比较等）</p><ul><li>算数逻辑单元ALU：实现对数据的算数和运算逻辑</li><li>累积寄存器AC：运算结果和源操作数的存放区</li><li>数据缓冲寄存器DR：暂时存放内存指令和数据</li><li>状态条件寄存器PSW：保存运行结果的条件码内容</li></ul></li><li><p>控制器组成：（控制整个CPU的工作，最为重要，包括程序控制、时序控制等）</p><ul><li>指令寄存器IR：暂存CPU执行指令</li><li>程序计数器PC：存放指令执行地址</li><li>地址寄存器AR：保存当前CPU所访问内存地址</li><li>指令译码器ID：分析指令操作码<br><img src="/./images/d1-1.png" alt="软件设计师教程知识点整理"></li></ul></li></ul><h4 id="3-存储器"><a href="#3-存储器" class="headerlink" title="3. 存储器"></a>3. 存储器</h4><ul><li>存储器结构（速度从高到低）：寄存器 – 高速缓存Cache – 主存 – 外存</li></ul><h2 id="二-计算机体系结构"><a href="#二-计算机体系结构" class="headerlink" title="二 计算机体系结构"></a>二 计算机体系结构</h2><h4 id="1-计算机体系结构分类"><a href="#1-计算机体系结构分类" class="headerlink" title="1. 计算机体系结构分类"></a>1. 计算机体系结构分类</h4><ul><li>Flynn分类法<br><img src="/./images/d1-4.png" alt="软件设计师教程知识点整理"></li></ul><h4 id="2-指令系统"><a href="#2-指令系统" class="headerlink" title="2. 指令系统"></a>2. 指令系统</h4><ul><li>复杂指令系统 CISC ： 兼容性强，长度可变，有微程序实现</li><li>精简指令系统 RISC：指令少，使用频率接近，主要依靠硬件实现<br><img src="/./images/d1-2.png" alt="软件设计师教程知识点整理"></li></ul><h4 id="3-指令流水线原理"><a href="#3-指令流水线原理" class="headerlink" title="3. 指令流水线原理"></a>3. 指令流水线原理</h4><ul><li><p>RISC流水线技术</p><ul><li>1)超流水线（时间换空间）</li><li>2)超标量（空间换时间）</li><li>3)超长指令字VLIM(执行多条指令，发挥软件作用)<br><img src="/./images/d1-3.png" alt="软件设计师教程知识点整理"></li></ul></li><li><p>流水线时间计算：</p>  <figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">设：总指令数为 n ; 单条指令总执行时间为 t单 ; 单条指令在流水线中耗时时间最长段时间 t周</span><br><span class="line">流水线周期： 指令执行时耗时最长的那个时间段 公式为： t周</span><br><span class="line">流水线执行总时间： 单条指令总执行时间 + （指令数 - 1） * 流水线周期 公式为： t总 = t单 + （n-1）* t周</span><br><span class="line">流水线吞吐率： 总指令数 / 流水线执行总时间 公式为：( n / t总 ) = ( n / t单 + （n-1）* t周 )</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-总线结构"><a href="#3-总线结构" class="headerlink" title="3. 总线结构"></a>3. 总线结构</h4><ul><li>按功能分：总线的分类：数据总线（DB），地址总线（AB），控制总线（CB）</li><li>按位置分：<ul><li>内部总线（处理器内部通信总线）</li><li>外部总线（设备一级的总线，计算机外部设通信的总线）</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/10/01/hello-world/"/>
      <url>/2023/10/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
